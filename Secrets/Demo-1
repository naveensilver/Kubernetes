Let's walk through updating a Kubernetes secret in a real-time scenario, along with hands-on implementation and explanations at each step.

### Scenario: Updating Database Credentials in Kubernetes

In this example, we'll update the database credentials stored in a Kubernetes secret and verify that the application reflects these changes without needing to redeploy it.

### Prerequisites

Ensure you have the following set up:
- A running Kubernetes cluster (Minikube, kind, or a cloud provider).
- `kubectl` configured to interact with your cluster.
- Docker installed to build the application image.

### Step 1: Recap of the Initial Setup

If you haven't already set up the application, follow these initial steps:

1. **Create a Project Directory**:
   ```bash
   mkdir k8s-secret-update-demo
   cd k8s-secret-update-demo
   ```

2. **Create the Node.js Application**:
   - **Create `app.js`**:
     ```javascript
     const express = require('express');
     const app = express();
     const port = process.env.PORT || 3000;

     app.get('/', (req, res) => {
         const dbUser = process.env.DB_USER;
         const dbPassword = process.env.DB_PASSWORD;

         res.send(`Database User: ${dbUser}, Password: ${dbPassword}`);
     });

     app.listen(port, () => {
         console.log(`App listening at http://localhost:${port}`);
     });
     ```

   - **Create `package.json`**:
     ```json
     {
       "name": "k8s-secret-update-demo",
       "version": "1.0.0",
       "main": "app.js",
       "dependencies": {
         "express": "^4.17.1"
       }
     }
     ```

   - **Create a Dockerfile**:
     ```dockerfile
     FROM node:14

     WORKDIR /usr/src/app
     COPY package*.json ./
     RUN npm install
     COPY . .

     CMD ["node", "app.js"]
     ```

3. **Build the Docker Image**:
   ```bash
   docker build -t k8s-secret-update-demo .
   ```

4. **Create the Initial Secret**:
   ```bash
   kubectl create secret generic db-credentials \
       --from-literal=username=my-db-user \
       --from-literal=password=my-db-password
   ```

5. **Create Deployment** (if not already created):
   ```yaml
   apiVersion: apps/v1
   kind: Deployment
   metadata:
     name: secret-demo
   spec:
     replicas: 1
     selector:
       matchLabels:
         app: secret-demo
     template:
       metadata:
         labels:
           app: secret-demo
       spec:
         containers:
         - name: app
           image: k8s-secret-update-demo
           ports:
           - containerPort: 3000
           env:
           - name: DB_USER
             valueFrom:
               secretKeyRef:
                 name: db-credentials
                 key: username
           - name: DB_PASSWORD
             valueFrom:
               secretKeyRef:
                 name: db-credentials
                 key: password
   ```

6. **Apply the Deployment**:
   ```bash
   kubectl apply -f deployment.yaml
   ```

7. **Expose the Application**:
   Create `service.yaml` and apply:
   ```yaml
   apiVersion: v1
   kind: Service
   metadata:
     name: secret-demo-service
   spec:
     type: NodePort
     selector:
       app: secret-demo
     ports:
       - port: 3000
         targetPort: 3000
         nodePort: 30001
   ```
   ```bash
   kubectl apply -f service.yaml
   ```

### Step 2: Access the Application

1. **Get Node's IP Address**:
   ```bash
   kubectl get nodes -o wide
   ```

2. **Access the Application**:
   Open your browser and navigate to:
   ```
   http://<node-ip>:30001
   ```
   You should see:
   ```
   Database User: my-db-user, Password: my-db-password
   ```

### Step 3: Update the Secret

Now, let's update the database credentials in the secret.

1. **Update the Secret**:
   You can update the secret using the `kubectl` command:
   ```bash
   kubectl create secret generic db-credentials \
       --from-literal=username=new-db-user \
       --from-literal=password=new-db-password \
       --dry-run=client -o yaml | kubectl apply -f -
   ```

   - **Explanation**:
     - This command creates a new secret with updated values but uses `--dry-run` to output the YAML without applying it, allowing it to be piped directly into `kubectl apply -f -` to update the existing secret.

2. **Verify the Update**:
   ```bash
   kubectl describe secret db-credentials
   ```
   - This command will show the new values (but the values will be base64-encoded).

### Step 4: Verify Application Reflects Changes

1. **Check the Logs of the Application**:
   Get the pod name:
   ```bash
   kubectl get pods
   ```
   Then check the logs:
   ```bash
   kubectl logs <pod-name>
   ```

2. **Access the Application Again**:
   Refresh the browser:
   ```
   http://<node-ip>:30001
   ```
   You should see the updated values:
   ```
   Database User: new-db-user, Password: new-db-password
   ```

### Step 5: Clean Up

Once you're done testing, clean up the resources:

```bash
kubectl delete service secret-demo-service
kubectl delete deployment secret-demo
kubectl delete secret db-credentials
```

### Conclusion

In this implementation, we:

1. Created a Node.js application that retrieves database credentials from a Kubernetes secret.
2. Deployed the application in Kubernetes and accessed it.
3. Updated the secret values and verified that the application reflected these changes in real-time.

This approach allows for secure management of sensitive information, making it easy to update configurations without redeploying your application. If you have any further questions or need assistance, feel free to ask!
