Let’s implement an end-to-end deployment of a scalable web application using Kubernetes, focusing on a retail website that can handle varying traffic loads. This hands-on example will cover all the steps from creating a simple web application to deploying it on Kubernetes, including scaling based on demand.

### Step 1: Set Up the Web Application

#### 1. Create the Project Directory
```bash
mkdir retail-web-app
cd retail-web-app
```

#### 2. Create the Web Application

For simplicity, we’ll use a basic Node.js application.

1. **Create `app.js`**:
   ```javascript
   const express = require('express');
   const app = express();
   const PORT = process.env.PORT || 5000;

   app.get('/', (req, res) => {
       res.send('Welcome to the Retail Website!');
   });

   app.listen(PORT, () => {
       console.log(`Server is running on port ${PORT}`);
   });
   ```

2. **Create `package.json`**:
   ```json
   {
     "name": "retail-web-app",
     "version": "1.0.0",
     "main": "app.js",
     "dependencies": {
       "express": "^4.17.1"
     },
     "scripts": {
       "start": "node app.js"
     }
   }
   ```

3. **Install Dependencies**:
   ```bash
   npm install
   ```

### Step 2: Containerize the Application

#### 1. Create a Dockerfile
Create a file named `Dockerfile` in the project directory:

```dockerfile
# Use the official Node.js image
FROM node:14

# Set the working directory
WORKDIR /app

# Copy package.json and install dependencies
COPY package.json ./
RUN npm install

# Copy the application code
COPY . .

# Expose the port the app runs on
EXPOSE 5000

# Command to run the application
CMD ["npm", "start"]
```

#### 2. Build the Docker Image
```bash
docker build -t <your-dockerhub-username>/retail-web-app:latest .
```

### Step 3: Push the Docker Image to a Container Registry

1. **Log in to Docker Hub**:
   ```bash
   docker login
   ```

2. **Tag the Image**:
   ```bash
   docker tag <your-dockerhub-username>/retail-web-app:latest <your-dockerhub-username>/retail-web-app:v1
   ```

3. **Push the Image**:
   ```bash
   docker push <your-dockerhub-username>/retail-web-app:v1
   ```

### Step 4: Deploy the Application to Kubernetes

#### 1. Create a Deployment YAML File
Create a file named `deployment.yaml`:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: retail-web-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: retail-web-app
  template:
    metadata:
      labels:
        app: retail-web-app
    spec:
      containers:
      - name: retail-web-app
        image: <your-dockerhub-username>/retail-web-app:v1
        ports:
        - containerPort: 5000
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
```

#### 2. Apply the Deployment
Deploy the application to your Kubernetes cluster:
```bash
kubectl apply -f deployment.yaml
```

#### 3. Verify the Deployment
Check the status of the Deployment and Pods:
```bash
kubectl get deployments
kubectl get pods
```

### Step 5: Expose the Application

#### 1. Create a Service YAML File
Create a file named `service.yaml`:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: retail-web-app
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 5000
  selector:
    app: retail-web-app
```

#### 2. Apply the Service
```bash
kubectl apply -f service.yaml
```

#### 3. Get the External IP
Retrieve the external IP address to access the application:
```bash
kubectl get services
```

### Step 6: Test the Application

Open a web browser and navigate to the external IP of your service. You should see "Welcome to the Retail Website!" displayed.

### Step 7: Scale the Application

#### 1. Scale Up the Deployment
To handle increased traffic during sales events, scale the application:
```bash
kubectl scale deployment retail-web-app --replicas=5
```

#### 2. Verify Scaling
Check the Pods to confirm the new replicas:
```bash
kubectl get pods
```

### Step 8: Set Up Horizontal Pod Autoscaler (HPA)

To automatically scale based on CPU usage, you can set up HPA.

#### 1. Install Metrics Server
If you haven't already, you need to install the Metrics Server in your cluster.

For example, on a standard cluster, you can install it with:
```bash
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
```

#### 2. Create HPA YAML File
Create a file named `hpa.yaml`:

```yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: retail-web-app-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: retail-web-app
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 50
```

#### 3. Apply HPA
```bash
kubectl apply -f hpa.yaml
```

### Step 9: Monitor the Deployment

1. **Monitor Pods**:
   Use `kubectl get pods` to watch the scaling in action as traffic varies.
  
2. **Check HPA Status**:
   ```bash
   kubectl get hpa
   ```

### Step 10: Clean Up

1. **Delete the Service and Deployment**:
   ```bash
   kubectl delete -f service.yaml
   kubectl delete -f deployment.yaml
   kubectl delete -f hpa.yaml
   ```

### Conclusion

In this end-to-end implementation, we:
- Developed a Node.js web application.
- Containerized it using Docker.
- Deployed it to a Kubernetes cluster using a Deployment.
- Exposed the application via a LoadBalancer service.
- Scaled the application manually and set up Horizontal Pod Autoscaler for automatic scaling.

This hands-on approach demonstrates how to deploy a scalable web application that can handle varying traffic loads, similar to a retail website during peak sales. If you have further questions or need more details, feel free to ask!
